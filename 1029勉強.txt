■クラスとインスタンス
インスタンス（instance）は具体的な「特定のもの」を表し、全てのインスタンスはクラス（class）に属している。
全てのインスタンスは、それが属しているクラスに共通の性質を持つ。

class クラス名{
	フィールドの宣言
	メソッドの宣言
}
フィールドは変数のようなもの。メソッドは関数のようなもの。
フィールドとメソッドがクラスの性質を決める。

「クラスメソッド」(=staticメソッド)はインスタンスを作らなくても呼び出すことができるが、
「インスタンスメソッド」(=非staticメソッド)はインスタンスを作らないと呼び出せない。

■インスタンスの作り方
Rectangleクラス（サンプル）のインスタンスを作るには、new演算子を使って次のように書きます。
new Rectangle()
即ち、newと書いて、次にクラス名(Rectangle)を書き、そしてカッコ()を書くのです。
このように書くと、Rectangleクラスのインスタンスが1個作られます。
newというのは「新しい」という意味のJavaの言語の予約語です。
新しいインスタンスを作るからですね。作ったインスタンスは、Rectangle型として宣言した変数に代入しておきましょう。
そうすれば、以降のプログラムでそのインスタンスを利用することができます。次のように書きます。
Rectangle r = new Rectangle();
これはint型の変数nに数123を代入する次の文と、とても似ています。new Rectangle()という式の部分が123と対応していますね。
int n = 123;
また、配列の作り方もこれと似ている。
int[] a = new inr[3];

■メソッドの呼び出し
ドット(.)を使ってインスタンスのフィールドを表現する。
Rectangle r = new Rectangle();
r.width = 123;
r.height = 45;

class Rectangle{
	int width;
	int height;
	void setSize(int w,int h){
		width = w;
		height = h;
	}
	…
}

Rectangle r = new Rectangle();
r.setSize(123,45);
引数とはメソッドへの入力のことです。「メソッドを呼び出すときに与える引数」のことを、特に実引数と呼びます。実際の値が定まった引数だからです。
これに対して、「メソッドの宣言に書かれた引数」のことを仮引数と呼びます。メソッドの呼び出しのときまで実際の値が定まらない仮の引数だからです。

■this：インスタンスの指定はいつ必要なのか？
フィールドにアクセスするには、r.widthのように、インスタンスを指す変数の後にドット(.)を付けてフィールド名を書きました。
でも、メソッド宣言の中ではr.の部分がなく、単にwidthと書いていました。どうしてでしょうか。
実は、メソッド宣言の中で使われるフィールド名やメソッド名の前には、「自分」を表すインスタンスthisが省略されているのです。
setSizeメソッド宣言を省略なしに書くと、次のようになります。
void setSize(int w,int h){
	this.width = w;
	this.height = h;
}
ここでthisは、インスタンス自身を表すものです。例えばr.setSize(123,45)という呼び出しの中では、thisとrは同じインスタンスを指します。
メソッド宣言の中では、フィールドやメソッドの前にインスタンスを指定する必要はありません。コンパイラによって自動的にthisが補われるからです。

■コンストラクタ　疑問：コンストラクタはメソッドではない？
コンストラクタとはインスタンスの生成と同時にインスタンスの初期化を行う仕組み。


■コンストラクタの宣言
class Rectangle{
	...
	Rectangle(int w, int h){	]
		width = w;		]コンストラクタ
		height = h;		]
	}
	...
}
コンストラクタの宣言は、メソッドの宣言とよく似ています。カッコ()でくくられた仮引数があり、中カッコ{}でくくられた範囲に処理内容を書きます。
メソッドと違うのは次の2点です。
①コンストラクタには戻り値の型がない(voidでもない)
②コンストラクタの名前はクラス名と同じ(Rectangle)
上記ではコンストラクタの中でwidthとheightに代入していますが、下記のようにsetSizeメソッドを使って書いても同じです。
コンストラクタの中で他のメソッドを呼び出してもよいのです。
class Rectangle{
	...
	Rectangle(int w, int h){
		setSize(w, h);
	}
	...
}

■コンストラクタの呼び出し
幅と高さを指定したコンストラクタを呼び出すには、次のようにします。
Rectangle r = new Rectangle(123,45);
こう書くだけで、幅が123、高さが45であるRectangleのインスタンスが生成され、変数rに代入されることになります。これは次に書いたのと同じです。
Rectangle r = new Rectangle();
r.width = 123;
r.height = 45;
もちろん、次とも同義です。
Rectangle r = new Rectangle();
r.setSize(123,45);

■引数なしコンストラクタ
幅も高さも指定しないでRectangleのインスタンスを作ったとき、幅は10、高さは20に自動的に初期化したいとしましょう。
そのようなとき、Rectangleのコンストラクタは以下のように書きます。
以下のように、引数を指定しないときのインスタンスの初期化を記述するのが引数なしコンストラクタです。
class Rectangle{
	...
	Rectangle(){
		setSize(10, 20);
	}
	...
}
戻り値がなく、クラス名と同じ名前を持ち、仮引数がないRectangleが、引数なしコンストラクタです。
インスタンスの作成時に呼び出すnew Rectangle()は、引数なしコンストラクタを呼び出していたのです。
引数列が異なっていれば、1つのクラスにコンストラクタが複数あっても構いません。
コンストラクタが1つも宣言されていないクラスの場合は、次のような引数なしコンストラクタが自動的に作成されます。
Rectangle(){
	super();
}
これはデフォルトコンストラクタと呼ばれています。

■フィールドの初期値
単なるフィールドの初期化は以下のように記述します。
class Rectangle{
	int width = 10;
	int height = 20;
}
初期化されていないフィールド値は、その型に応じて初期化されますが、初期化されていない変数の値は未定義になります。

■インスタンスはどこに作られているのか？
変数が確保されている領域をスタック(stack)と呼び、またインスタンス確保されている領域をヒープ(heap)と呼ぶ。

■クラスフィールドとは
Javaでは、全インスタンスに共通の情報を保持する場所としてクラスフィールド(class field)と呼ばれるフィールドを宣言することができます。
クラスフィールドは、クラス変数(class variable)やスタティックフィールド(static field)と呼ばれることもあります。

■クラスフィールドの宣言
class Rectangle{
	static int counter = 0;
	...
}
このクラス変数counterは、これまでに作成されたRectangleのインスタンスの個数を保持しておくためのものです。
通常のフィールド(インスタンスフィールド)と異なり、クラスフィールドにはstaticという修飾子が付けられています。
インスタンスフィールドはインスタンス毎に作られますが、クラスフィールドは、たった一つだけ存在します。

■クラスメソッドの宣言
staticを付けて宣言したメソッドはクラスメソッド(staticメソッド)といいます。
クラスメソッドは、特定のインスタンスと関連付けられていません。
ですから、クラスメソッドの中で「現在のインスタンス」を示すthisを使うと、コンパイルエラーになります。
staticを付けずに宣言したメソッドは「インスタンスメソッド」あるいは「staticではないメソッド」といいます。
インスタンスメソッドの中では、thisやsuperを使うことができます。
現在のインスタンスの状態を調べたり、現在のインスタンスに対して処理を行ったりするメソッド(つまり、インスタンスフィールドを使って計算を行うメソッド)は、
インスタンスメソッドとして宣言するのが普通です。
これに対して、そのクラスのインスタンスの中からある特定のインスタンスを見つけ出すメソッドや、クラス変数に対して計算や処理を行うメソッドは、
クラスメソッドとして宣言するのが普通です。

■インスタンスメソッドとクラスメソッドのサンプル　→インスタンスメソッドは引数が必要なく、クラスメソッドは必要？
インスタンスメソッド
class Rectangle{
	int width;
	int height;
	int getArea(){
		return width * height;
	}
	...
}
クラスメソッド
class Rectangle{
	int width;
	int height;
	static int getArea(Rectangle obj){
		return obj.width * oblheight;
	}
	...
}
インスタンスメソッドとして書いたgetAreaでは、インスタンスフィールドのwidthやheightをすぐに使うことができます。
これに対して、クラスメソッドとして書いたgetAreaでは、引数でインスタンスを渡してもらう必要があります。
ここでは、引数objにRecrangleのインスタンスを渡してもらい、obj.widthやobj.heightとしてインスタンスフィールドを使っています。

■練習問題
問題11-6と問題11-9が難しかったので要復習

12章
■継承
サブクラスはスーパークラスのフィールドとメソッドを受け継ぎます。このことを継承と呼びます。

■コンストラクタは継承されない
コンストラクタが継承されてしまうと、サブクラスでの初期化が行われないことになってしまうため。



